from datetime import datetime
from typing import List, Optional, Tuple, Union
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, Document, PhotoSize
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import aiosqlite

from school_bot.db.controllers import AssignmentData, check_class_exists_case_insensitive, create_class_assignment, create_individual_assignment, create_new_class, get_original_class_name, get_submitted_work_details, get_submitted_works, get_teacher_classes, grade_assignment_work, update_assignment_message_id, update_individual_assignment
from school_bot.db.students import add_new_student, add_student_to_class, check_student_exists, check_student_in_class, get_student_chat_id, get_student_notification_info, get_students_in_class
from school_bot.db.teachers import get_completed_assignments_teacher, is_user_teacher, get_teacher_classes_with_students
from school_bot.db.database import get_db_connection
from school_bot.states import TeacherStates
from main import dp, bot
from school_bot.config import BOT_USERNAME, MAX_FILE_SIZE, DIRECTOR_USERNAME


@dp.message(F.text == "üë®‚Äçüè´ –î–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—è")
async def add_teacher_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—è"""
    if message.from_user.username != DIRECTOR_USERNAME:
        from school_bot.handlers.universal import get_user_menu
        await message.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É", reply_markup=await get_user_menu(message.from_user.username))
        return
    
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è (–±–µ–∑ @):\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>ivanov_teacher</code>",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(TeacherStates.waiting_for_new_teacher_username)


@dp.message(TeacherStates.waiting_for_new_teacher_username)
async def process_new_teacher_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ username –Ω–æ–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è"""
    from school_bot.db.teachers import teacher_exists, add_teacher
    from school_bot.db.students import student_exists
    from school_bot.handlers.universal import get_user_menu
    
    username = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è username
    if not username.replace('_', '').isalnum():
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    if len(username) > 32:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π username. –ú–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    async with get_db_connection() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–∏—Ç–µ–ª—è
        if await teacher_exists(conn, username):
            await message.answer(
                f"‚ùå –£—á–∏—Ç–µ–ª—å @{username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π username:"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—á–µ–Ω–∏–∫–æ–º
        if await student_exists(conn, username):
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —É—á–µ–Ω–∏–∫.\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π username:"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è
        if await add_teacher(conn, username):
            await message.answer(
                f"‚úÖ –£—á–∏—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
                f"<code>https://t.me/{BOT_USERNAME}?start=teacher_{username}</code>",
                parse_mode="HTML",
                reply_markup=await get_user_menu(message.from_user.username)
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∏—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=await get_user_menu(message.from_user.username)
            )
    
    await state.clear()


@dp.message(F.text == "üè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∫–æ–ª–æ–π")
async def school_management_handler(message: types.Message):
    if message.from_user.username != DIRECTOR_USERNAME:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É")
        return
    
    await message.answer("‚õî TODO")
    return

    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∫–æ–ª—ã"))
    builder.row(KeyboardButton(text="üìù –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"))
    builder.row(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    
    await message.answer(
        "üè´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∫–æ–ª–æ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
        parse_mode="HTML"
    )


def get_teacher_main_menu(is_director: bool = False) -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —É—á–∏—Ç–µ–ª—è –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —É—á–∏—Ç–µ–ª–µ–π
    builder.row(
        KeyboardButton(text="üìù –î–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"),
        KeyboardButton(text="üë• –ú–æ–∏ –∫–ª–∞—Å—Å—ã")
    )
    builder.row(
        KeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç"),
        KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
    )
    
    if is_director:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        builder.row(
            KeyboardButton(text="üë®‚Äçüè´ –î–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—è"),
            KeyboardButton(text="üè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∫–æ–ª–æ–π")
        )
    else:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —É—á–∏—Ç–µ–ª–µ–π
        builder.row(
            KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å"),
            KeyboardButton(text="üéì –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
        )
    
    return builder.as_markup(
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

def get_teacher_cancel_menu() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)


@dp.message(F.text == "üìù –î–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def give_assignment_button(message: types.Message, state: FSMContext):
    await give_assignment_start(message, state)


@dp.message(F.text == "üë• –ú–æ–∏ –∫–ª–∞—Å—Å—ã")
async def view_classes_button(message: types.Message):
    await view_classes(message)


@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å")
async def create_class_button(message: types.Message, state: FSMContext):
    await create_class_start(message, state)


@dp.message(F.text == "üéì –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
async def add_student_button(message: types.Message, state: FSMContext):
    await add_student_start(message, state)


@dp.message(F.text == "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç")
async def view_completed_button(message: types.Message, state: FSMContext):
    await view_completed_start(message, state)


@dp.message(Command("view_completed"))
async def view_completed_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    teacher_username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not await is_user_teacher(teacher_username):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π")
        return
    
    completed_works, total_count = await get_completed_assignments_teacher(teacher_username)
    
    if not completed_works:
        from school_bot.handlers.universal import get_user_menu
        await message.answer(
            "üì≠ –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            reply_markup=await get_user_menu(str(message.from_user.username))
        )
        return
    
    await state.update_data(
        completed_works=completed_works,
        current_page=0,
        total_works=total_count
    )
    await show_completed_works_page(message, state)


async def show_completed_works_page(message: types.Message, state: FSMContext):
    data = await state.get_data()
    completed_works = data["completed_works"]
    current_page = data["current_page"]
    works_per_page = 5
    
    total_pages = (len(completed_works) + works_per_page - 1) // works_per_page
    start_idx = current_page * works_per_page
    end_idx = start_idx + works_per_page
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = (
        f"üìö <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages})\n\n"
        f"–í—Å–µ–≥–æ —Ä–∞–±–æ—Ç: {len(completed_works)}\n\n"
    )
    
    for i, work in enumerate(completed_works[start_idx:end_idx], start_idx + 1):
        response += (
            f"üîπ <b>–†–∞–±–æ—Ç–∞ #{i}</b>\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {work['student_name']} (@{work['student']})\n"
            f"üìù –ó–∞–¥–∞–Ω–∏–µ: {work['assignment'][:50]}...\n"
            f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {work['submitted_at'][:10]}\n"
            f"üèÜ –û—Ü–µ–Ω–∫–∞: {work['grade']}\n\n"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"))
    
    if end_idx < len(completed_works):
        nav_buttons.append(types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next_page"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    for i, work in enumerate(completed_works[start_idx:end_idx], start_idx + 1):
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—É #{i}",
                callback_data=f"view_work_{start_idx + i - 1}"
            )
        ])
    
    await message.answer(
        response,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data in ["prev_page", "next_page"])
async def handle_page_navigation(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data["current_page"]
    
    if callback.data == "prev_page" and current_page > 0:
        await state.update_data(current_page=current_page - 1)
    elif callback.data == "next_page":
        await state.update_data(current_page=current_page + 1)
    
    await callback.message.delete()
    await show_completed_works_page(callback.message, state)
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("view_work_"))
async def view_specific_work(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    work_idx = int(callback.data.split("_")[-1])
    work = data["completed_works"][work_idx]
    
    response = (
        f"üìÑ <b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã</b>\n\n"
        f"üë§ –£—á–µ–Ω–∏–∫: {work['student_name']} (@{work['student']})\n"
        f"üìù –ó–∞–¥–∞–Ω–∏–µ: {work['assignment']}\n"
        f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {work['submitted_at'][:10]}\n"
        f"üèÜ –û—Ü–µ–Ω–∫–∞: {work['grade']}\n\n"
        f"üìã –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞:\n{work['response'][:1000]}\n"
    )
    
    keyboard = [
        [types.InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"grade_work_{work_idx}")],
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
    ]
    
    try:
        if work["file_id"]:
            if work["file_type"] == "document":
                await bot.send_document(
                    chat_id=callback.message.chat.id,
                    document=work["file_id"],
                    caption=response[:1024],
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
                    parse_mode="HTML"
                )
            elif work["file_type"] == "photo":
                await bot.send_photo(
                    chat_id=callback.message.chat.id,
                    photo=work["file_id"],
                    caption=response[:1024],
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
                    parse_mode="HTML"
                )
            else:
                await callback.message.answer(
                    response,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
                    parse_mode="HTML"
                )
        else:
            await callback.message.answer(
                response,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )
    except Exception as e:
        print(f"Error sending work details: {e}")
        await callback.message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n" + response,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
    
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("grade_work_"))
async def start_grading_work(callback: types.CallbackQuery, state: FSMContext):
    work_idx = int(callback.data.split("_")[-1])
    await state.update_data(current_work_idx=work_idx)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    grades_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=str(i), callback_data=f"set_grade_{i}") for i in range(1, 6)],
        [types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel_grading")]
    ])
    
    await callback.message.edit_caption(
        caption=callback.message.caption + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:",
        reply_markup=grades_keyboard
    )
    await callback.answer()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
@dp.callback_query(lambda c: c.data.startswith("set_grade_"))
async def handle_set_grade(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏"""
    try:
        grade = int(callback.data.split("_")[-1])
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç—ã
        work_idx = data.get("current_work_idx")
        if work_idx is None:
            await callback.answer("–û—à–∏–±–∫–∞: —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç
        completed_works = data.get("completed_works", [])
        if work_idx >= len(completed_works):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç—ã")
            return
            
        work = completed_works[work_idx]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ë–î
        success = await grade_assignment_work(work['id'], grade)
        if not success:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
        completed_works[work_idx]['grade'] = grade
        await state.update_data(completed_works=completed_works)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
        try:
            student_data = await get_student_notification_info(work['student'])
            if student_data:
                student_chat_id, student_name = student_data
                from school_bot.handlers.student import get_student_main_menu
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–º–µ–Ω–∏
                student_display_name = student_name if student_name else f"@{work['student']}"
                message_text = (
                    f"üì¢ {student_display_name}, –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!\n\n"
                    f"–ó–∞–¥–∞–Ω–∏–µ: {work['assignment'][:100]}\n"
                    f"–û—Ü–µ–Ω–∫–∞: {grade}"
                )
                
                await bot.send_message(
                    chat_id=student_chat_id,
                    text=message_text,
                    reply_markup=get_student_main_menu()
                )
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É @{work['student']}")
        except Exception as e:
            print(f"Error notifying student @{work['student']}: {e}")
        
        await callback.answer(f"–û—Ü–µ–Ω–∫–∞ {grade} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!")
        await back_to_work_details(callback, state)
        
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞")
    except Exception as e:
        print(f"Error in handle_set_grade: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(lambda c: c.data == "cancel_grading")
async def cancel_grading(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ü–µ–Ω–∫–∏"""
    try:
        await back_to_work_details(callback, state)
        await callback.answer("–û—Ü–µ–Ω–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"Error in cancel_grading: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(lambda c: c.data == "back_to_list")
async def back_to_list(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await show_completed_works_page(callback.message, state)
    await callback.answer()


def format_work_details(work: tuple) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return (
        f"üìÑ <b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã</b>\n\n"
        f"üë§ –£—á–µ–Ω–∏–∫: {work[2]} (@{work[1]})\n"
        f"üìù –ó–∞–¥–∞–Ω–∏–µ: {work[3]}\n"
        f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {work[7][:10]}\n"
        f"üèÜ –û—Ü–µ–Ω–∫–∞: {work[8] if work[8] else '–µ—â—ë –Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ'}\n\n"
        f"üìã –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞:\n{work[4][:1000] if work[4] else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'}\n"
    )


def create_work_details_keyboard(work_id: int) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–π"""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É", 
            callback_data=f"grade_work_{work_id}"
        )],
        [types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", 
            callback_data="back_to_list"
        )]
    ])


async def back_to_work_details(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –¥–µ—Ç–∞–ª—è–º —Ä–∞–±–æ—Ç—ã"""
    try:
        data = await state.get_data()
        work_idx = data.get("current_work_idx")
        if work_idx is None:
            await callback.answer("–û—à–∏–±–∫–∞: —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        completed_works = data.get("completed_works", [])
        if work_idx >= len(completed_works):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç—ã")
            return
            
        work = completed_works[work_idx]
        
        response = (
            f"üìÑ <b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã</b>\n\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {work['student_name']} (@{work['student']})\n"
            f"üìù –ó–∞–¥–∞–Ω–∏–µ: {work['assignment']}\n"
            f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {work['submitted_at'][:10]}\n"
            f"üèÜ –û—Ü–µ–Ω–∫–∞: {work['grade']}\n\n"
            f"üìã –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞:\n{work['response'][:1000]}\n"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", 
                callback_data=f"grade_work_{work_idx}"
            )],
            [types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", 
                callback_data="back_to_list"
            )]
        ])
        
        try:
            if work.get("file_id"):
                if work.get("file_type") == "document":
                    await callback.message.edit_caption(
                        caption=response,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                else:
                    await callback.message.edit_media(
                        media=types.InputMediaPhoto(
                            media=work["file_id"],
                            caption=response,
                            parse_mode="HTML"
                        ),
                        reply_markup=keyboard
                    )
            else:
                await callback.message.edit_text(
                    text=response,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
        except Exception as e:
            print(f"Error editing message: {e}")
            await callback.message.delete()
            await callback.message.answer(
                response,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except Exception as e:
        print(f"Error in back_to_work_details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def build_works_keyboard(works: list[tuple], page: int = 0) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç"""
    start_idx = page * 10
    end_idx = start_idx + 10
    current_works = works[start_idx:end_idx]
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=f"{i+1+start_idx}. {work[2]} (@{work[1]}): {work[3][:20]}...",
            callback_data=f"view_work_{work[0]}"
        )] for i, work in enumerate(current_works)
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if len(works) > 10:
        buttons = []
        if page > 0:
            buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_works_page"))
        if end_idx < len(works):
            buttons.append(types.InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="next_works_page"))
        keyboard.inline_keyboard.append(buttons)
    
    return keyboard


@dp.callback_query(lambda c: c.data == "view_all_works")
async def view_all_works(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–∞–±–æ—Ç"""
    teacher_username = callback.from_user.username
    
    works = await get_submitted_works(teacher_username)
    if not works:
        await callback.answer("–ù–µ—Ç —Ä–∞–±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—Ç—ã –≤ state –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await state.update_data(all_works=works, current_page=0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = build_works_keyboard(works)
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "next_works_page")
async def next_works_page(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    works = data.get("all_works", [])
    current_page = data.get("current_page", 0)
    
    if not works:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—Ç–∞—Ö")
        return
    
    next_page = current_page + 1
    start_idx = next_page * 10
    end_idx = start_idx + 10
    
    if start_idx >= len(works):
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=f"{start_idx+i+1}. {work[2]} (@{work[1]}): {work[3][:20]}...",
            callback_data=f"view_work_{work[0]}"
        )] for i, work in enumerate(works[start_idx:end_idx])
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if next_page > 0:
        nav_buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_works_page"))
    if end_idx < len(works):
        nav_buttons.append(types.InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="next_works_page"))
    
    if nav_buttons:
        keyboard.inline_keyboard.append(nav_buttons)
    
    await state.update_data(current_page=next_page)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "prev_works_page")
async def prev_works_page(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    works = data.get("all_works", [])
    current_page = data.get("current_page", 0)
    
    if current_page <= 0:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return
    
    prev_page = current_page - 1
    start_idx = prev_page * 10
    end_idx = start_idx + 10
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=f"{start_idx+i+1}. {work[2]} (@{work[1]}): {work[3][:20]}...",
            callback_data=f"view_work_{work[0]}"
        )] for i, work in enumerate(works[start_idx:end_idx])
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if prev_page > 0:
        nav_buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_works_page"))
    if end_idx < len(works):
        nav_buttons.append(types.InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="next_works_page"))
    
    if nav_buttons:
        keyboard.inline_keyboard.append(nav_buttons)
    
    await state.update_data(current_page=prev_page)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


def format_work_response(work: tuple) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    return (
        f"üë®üéì –£—á–µ–Ω–∏–∫: {work[2]} (@{work[1]})\n"
        f"üìù –ó–∞–¥–∞–Ω–∏–µ: {work[3]}\n"
        f"üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {work[6][:10]}\n"
        f"üèÜ –û—Ü–µ–Ω–∫–∞: {work[7] if work[7] else '–µ—â—ë –Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ'}\n\n"
        f"üìÑ –û—Ç–≤–µ—Ç:\n{work[4] or '–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'}"
    )


async def send_work_file(chat_id: int, file_id: str, caption: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å—å—é"""
    try:
        file_type = "document" if file_id.startswith("BQ") else "photo"
        
        if file_type == "document":
            await bot.send_document(
                chat_id=chat_id,
                document=file_id,
                caption=caption[:1000]
            )
        else:
            await bot.send_photo(
                chat_id=chat_id,
                photo=file_id,
                caption=caption[:1000]
            )
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")


@dp.callback_query(lambda c: c.data.startswith("view_work_"))
async def view_specific_work(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    work_id = int(callback.data.split("_")[-1])
    teacher_username = callback.from_user.username
    
    work = await get_submitted_work_details(work_id, teacher_username)
    if not work:
        await callback.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    response = format_work_response(work)
    
    try:
        if work[5]:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª
            await send_work_file(callback.from_user.id, work[5], response)
        else:
            await callback.message.answer(response)
    except ValueError as e:
        await callback.message.answer(
            f"{response}\n\n‚ö† {str(e)}",
            parse_mode="HTML"
        )
    
    await callback.answer()


@dp.message(Command("create_class"))
async def create_class_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    teacher_username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not await is_user_teacher(teacher_username):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª–∞—Å—Å—ã")
        return
    
    await state.update_data(teacher_username=teacher_username)
    await state.set_state(TeacherStates.waiting_for_new_class_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞:",
        reply_markup=get_teacher_cancel_menu()
    )


@dp.message(TeacherStates.waiting_for_new_class_name)
async def process_new_class_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    class_name = message.text.strip()
    teacher_username = message.from_user.username
    
    if not class_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    
    if await check_class_exists_case_insensitive(teacher_username, class_name):
        await message.answer("–ö–ª–∞—Å—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    else:
        await create_new_class(teacher_username, class_name)
        from school_bot.handlers.universal import get_user_menu
        await message.answer(
            f"–ö–ª–∞—Å—Å '{class_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            reply_markup=await get_user_menu(str(message.from_user.username))
        )
    
    await state.clear()


@dp.message(Command("add_student"))
async def add_student_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –≤ –∫–ª–∞—Å—Å"""
    teacher_username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not await is_user_teacher(teacher_username):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–µ–Ω–∏–∫–æ–≤")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ —É—á–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    teacher_classes = await get_teacher_classes(teacher_username)
    if not teacher_classes:
        from school_bot.handlers.universal import get_user_menu
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å.",
            reply_markup=await get_user_menu(str(message.from_user.username))
        )
        return
    
    await state.update_data(teacher_username=teacher_username)
    await state.set_state(TeacherStates.waiting_for_class_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞:",
        reply_markup=get_teacher_cancel_menu()
    )


@dp.message(TeacherStates.waiting_for_class_name)
async def select_class_for_student(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
    class_name = message.text.strip()
    teacher_username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    original_class_name = await get_original_class_name(teacher_username, class_name)
    
    if original_class_name:
        await state.update_data(class_name=original_class_name)
        await state.set_state(TeacherStates.waiting_for_student_username)
        await message.answer(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ @username —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞ '{original_class_name}':")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        available_classes = await get_teacher_classes(teacher_username)
        classes_list = "\n".join([f"- {class_name}" for class_name in available_classes])
        
        from school_bot.handlers.universal import get_user_menu
        await message.answer(
            f"–ö–ª–∞—Å—Å '{class_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–∞—à–∏ –∫–ª–∞—Å—Å—ã:\n{classes_list}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel",
            reply_markup=await get_user_menu(str(message.from_user.username))
        )


@dp.message(TeacherStates.waiting_for_student_username)
async def process_student_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –≤ –∫–ª–∞—Å—Å"""
    student_username = message.text.strip("@")
    data = await state.get_data()
    class_name = data["class_name"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–µ–Ω–∏–∫ —É–∂–µ –≤ –∫–ª–∞—Å—Å–µ
    if await check_student_in_class(student_username, class_name):
        from school_bot.handlers.universal import get_user_menu
        await message.answer("–≠—Ç–æ—Ç —É—á–µ–Ω–∏–∫ —É–∂–µ –≤ –¥–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ.",
                           reply_markup=await get_user_menu(str(message.from_user.username)))
        await state.clear()
        return
    
    # –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ - –¥–æ–±–∞–≤–ª—è–µ–º
    if not await check_student_exists(student_username):
        await add_new_student(student_username)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞ –≤ –∫–ª–∞—Å—Å
    await add_student_to_class(student_username, class_name)
    
    from school_bot.handlers.universal import get_user_menu
    await message.answer(
        f"–£—á–µ–Ω–∏–∫ @{student_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–ª–∞—Å—Å '{class_name}'!",
        reply_markup=await get_user_menu(str(message.from_user.username))
    )
    await state.clear()


@dp.message(Command("give_assignment"))
async def give_assignment_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    teacher_username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not await is_user_teacher(teacher_username):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å—ã —É—á–∏—Ç–µ–ª—è
    classes = await get_teacher_classes(teacher_username)
    
    if not classes:
        from school_bot.handlers.universal import get_user_menu
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å.",
            reply_markup=await get_user_menu(str(message.from_user.username))
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
    await state.update_data(teacher_username=teacher_username)
    await state.set_state(TeacherStates.waiting_for_assignment_type)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤
    classes_list = "\n".join([f"- {class_name}" for class_name in classes])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:\n"
        "1. –î–ª—è –≤—Å–µ–≥–æ –∫–ª–∞—Å—Å–∞ - –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞:\n"
        f"{classes_list}\n"
        "2. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ - –≤–≤–µ–¥–∏—Ç–µ 'individual'",
        reply_markup=get_teacher_cancel_menu()
    )


@dp.message(TeacherStates.waiting_for_assignment_type)
async def process_assignment_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è (–∫–ª–∞—Å—Å/–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ)"""
    input_text = message.text.strip()
    teacher_username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    if input_text.lower() == "individual":
        await state.set_state(TeacherStates.waiting_for_student_selection)
        await state.update_data(assignment_type="individual")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ @username —É—á–µ–Ω–∏–∫–∞ (–±–µ–∑ @):")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è)
    async with get_db_connection() as conn:
        original_class_name = await get_original_class_name(teacher_username, input_text)
        
        if original_class_name:
            await state.set_state(TeacherStates.waiting_for_assignment_text)
            await state.update_data(
                assignment_type="class",
                class_name=original_class_name
            )
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∞ {original_class_name}:")
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º –Ω–∞–∑–≤–∞–Ω–∏–π
            available_classes = await get_teacher_classes(teacher_username)
            classes_list = "\n".join([f"- {class_name}" for class_name in available_classes])
            
            await message.answer(
                f"–ö–ª–∞—Å—Å '{input_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã:\n{classes_list}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ:\n"
                "'individual' - –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n"
                "'/cancel' - –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                reply_markup=get_teacher_cancel_menu()
            )


@dp.message(TeacherStates.waiting_for_student_selection)
async def process_student_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    student_username = message.text.strip().lower().replace("@", "")
    
    if await check_student_exists(student_username):
        await state.update_data(student_username=student_username)
        await state.set_state(TeacherStates.waiting_for_assignment_text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    else:
        await message.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


@dp.message(TeacherStates.waiting_for_assignment_text)
async def process_assignment_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)"""
    assignment_text = message.text
    data = await state.get_data()
    teacher_username = message.from_user.username
    
    await state.update_data(assignment_text=assignment_text)
    
    try:
        # –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        await message.answer(
            "–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(TeacherStates.waiting_for_assignment_file)
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ –∑–∞–¥–∞–Ω–∏—é? (PDF, Word, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>‚ùå –û—Ç–º–µ–Ω–∞</b> —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è: {e}")
        from school_bot.handlers.universal import get_user_menu
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è",
            reply_markup=await get_user_menu(str(message.from_user.username))
        )
        await state.clear()


@dp.message(
    TeacherStates.waiting_for_assignment_file,
    Command("skip")
)
async def skip_file_attachment(message: Message, state: FSMContext):
    await state.clear()
    from school_bot.handlers.universal import get_user_menu
    await message.answer("–ó–∞–¥–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –±–µ–∑ —Ñ–∞–π–ª–∞", reply_markup=await get_user_menu(str(message.from_user.username)))


@dp.message(
    TeacherStates.waiting_for_assignment_file,
    ~F.document,
    ~F.photo
)
async def process_invalid_file(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (PDF, Word, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip")


async def get_file_info(message: Union[Document, PhotoSize]) -> Tuple[str, str, Optional[str]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if isinstance(message, Document):
        if message.file_size > MAX_FILE_SIZE:
            raise ValueError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE//1024//1024}MB")
        return message.file_id, "document", message.file_name
    else:  # Photo
        return message.file_id, "photo", None


async def notify_student_with_file(
    chat_id: int,
    text: str,
    file_id: str,
    file_type: str,
    caption: str
) -> Optional[int]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É —Å —Ñ–∞–π–ª–æ–º"""
    try:
        msg = await bot.send_message(chat_id=chat_id, text=text)
        
        if file_type == "document":
            await bot.send_document(
                chat_id=chat_id,
                document=file_id,
                caption=caption,
                reply_to_message_id=msg.message_id
            )
        else:
            await bot.send_photo(
                chat_id=chat_id,
                photo=file_id,
                caption=caption,
                reply_to_message_id=msg.message_id
            )
        
        return msg.message_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return None


async def process_individual_assignment(
    conn: aiosqlite.Connection,
    teacher_username: str,
    student_username: str,
    assignment_text: str,
    file_id: str,
    file_type: str,
    file_name: Optional[str]
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    await update_individual_assignment(
        conn,
        teacher_username,
        student_username,
        assignment_text,
        file_id,
        file_type,
        file_name
    )
    
    student_chat_id = await get_student_chat_id(conn, student_username)
    if not student_chat_id:
        return
    
    msg_id = await notify_student_with_file(
        chat_id=student_chat_id,
        text=f"üìå –ù–æ–≤–æ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (—Å —Ñ–∞–π–ª–æ–º):\n{assignment_text}",
        file_id=file_id,
        file_type=file_type,
        caption="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫ –∑–∞–¥–∞–Ω–∏—é"
    )
    
    if msg_id:
        await update_assignment_message_id(conn, msg_id, {
            'teacher_username': teacher_username,
            'student_username': student_username,
            'assignment_text': assignment_text
        })


async def process_class_assignment(
    conn: aiosqlite.Connection,
    teacher_username: str,
    class_name: str,
    assignment_text: str,
    file_id: Optional[str] = None,
    file_type: Optional[str] = None,
    file_name: Optional[str] = None
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞ (–±–µ–∑ message_id)"""
    students = await get_students_in_class(conn, class_name)
    
    for student_username, student_chat_id in students:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ë–î
        await create_class_assignment(
            conn,
            teacher_username,
            student_username,
            class_name,
            assignment_text,
            file_id,
            file_type,
            file_name
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
        if student_chat_id:
            try:
                if file_id:
                    if file_type == "document":
                        await bot.send_document(
                            chat_id=student_chat_id,
                            document=file_id,
                            caption=f"üìå –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}:\n{assignment_text}"
                        )
                    else:
                        await bot.send_photo(
                            chat_id=student_chat_id,
                            photo=file_id,
                            caption=f"üìå –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}:\n{assignment_text}"
                        )
                else:
                    await bot.send_message(
                        chat_id=student_chat_id,
                        text=f"üìå –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}:\n{assignment_text}"
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫—É {student_username}: {e}")


async def prepare_assignment_data(
    message: Message,
    state: FSMContext
) -> Optional[AssignmentData]:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    try:
        data = await state.get_data()
        file_content = message.document or message.photo[-1]
        file_id, file_type, file_name = await get_file_info(file_content)
        
        return AssignmentData(
            teacher_username=message.from_user.username,
            student_username=data.get("student_username"),
            assignment_text=data.get("assignment_text", ""),
            file_id=file_id,
            file_type=file_type,
            file_name=file_name,
            class_name=data.get("class_name")
        )
    except ValueError as e:
        await message.answer(str(e))
        return None


@dp.message(
    TeacherStates.waiting_for_assignment_file,
    F.document | F.photo
)
async def process_assignment_file(message: Message, state: FSMContext):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º"""
    data = await state.get_data()
    teacher_username = message.from_user.username
    file_content = message.document or message.photo[-1]
    file_id, file_type, file_name = await get_file_info(file_content)
    
    async with get_db_connection() as conn:
        try:
            success = False
            
            if data["assignment_type"] == "individual":
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
                updated = await update_individual_assignment(
                    conn,
                    teacher_username,
                    data["student_username"],
                    data["assignment_text"],
                    file_id,
                    file_type,
                    file_name
                )
                
                if not updated:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                    success = await create_individual_assignment(
                        conn,
                        teacher_username,
                        data["student_username"],
                        data["assignment_text"],
                        file_id,
                        file_type,
                        file_name
                    )
                else:
                    success = True
            else:
                # –î–ª—è –∫–ª–∞—Å—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    required_params = ['class_name', 'assignment_text']
                    for param in required_params:
                        if param not in data:
                            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    await process_class_assignment(
                        conn,
                        teacher_username,
                        data["class_name"],
                        data["assignment_text"],
                        file_id,
                        file_type,
                        file_name
                    )
                    success = True
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –≤ process_class_assignment:")
                    print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                    print(f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {e.args}")
                    print("–°—Ç–µ–∫ –≤—ã–∑–æ–≤–∞:")
                    import traceback
                    traceback.print_exc()
                    raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            
            from school_bot.handlers.universal import get_user_menu
            if success:
                await conn.commit()
                await state.clear()
                await message.answer(
                    "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
                    reply_markup=await get_user_menu(str(message.from_user.username))
                )
            else:
                await message.answer(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
                    reply_markup=await get_user_menu(str(message.from_user.username))
                )
                
        except Exception as e:
            await conn.rollback()
            error_msg = [
                "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è",
                f"–¢–∏–ø: {type(e).__name__}",
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}",
                "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–∞:",
                *traceback.format_tb(e.__traceback__)
            ]
            print("\n".join(error_msg))
            
            await message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è\n"
                f"–¢–∏–ø: {type(e).__name__}\n"
                f"–û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=await get_user_menu(str(message.from_user.username))
            )
            await state.clear()


def format_classes_response(classes: List[Tuple[str, Optional[str]]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not classes:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤."
    
    response = "üè´ <b>–í–∞—à–∏ –∫–ª–∞—Å—Å—ã –∏ —É—á–µ–Ω–∏–∫–∏:</b>\n\n"
    for class_name, students_str in classes:
        response += f"<b>{class_name}</b>:\n"
        if students_str:
            students = students_str.split(', ')
            response += "\n".join([f"üë§ @{username}" for username in students]) + "\n\n"
        else:
            response += "–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤\n\n"
    return response


@dp.message(Command("view_classes"))
async def view_classes(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ —É—á–∏—Ç–µ–ª—è —Å —É—á–µ–Ω–∏–∫–∞–º–∏"""
    teacher_username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not await is_user_teacher(teacher_username):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–ª–∞—Å—Å—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    classes = await get_teacher_classes_with_students(teacher_username)
    
    if not classes:
        from school_bot.handlers.universal import get_user_menu
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤.",
            reply_markup=await get_user_menu(str(message.from_user.username)),
            parse_mode="HTML"
        )
        return
    
    response = format_classes_response(classes)
    
    await message.answer(
        response,
        parse_mode="HTML",
        reply_markup=await get_user_menu(str(message.from_user.username))
    )