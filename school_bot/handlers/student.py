import traceback
from typing import List, Optional, Tuple
from aiogram import types
from aiogram.types import Message, ContentType, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram import F
import httpx

from school_bot.db.controllers import get_active_assignments, get_active_assignments_for_student, get_assignment_details, get_assignment_info, update_assignment_response
from school_bot.db.students import get_completed_assignments_student, get_student_classes_with_assignments, get_student_display_name
from school_bot.db.teachers import get_teacher_chat_id
from school_bot.db.database import get_db_connection
from school_bot.config import MAX_FILE_SIZE, SCHOOL_URL
from main import dp, bot


from school_bot.parse import parse_school_info, parse_school_schedule
from school_bot.states import StudentStates


def get_student_main_menu() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∫–æ–ª–µ"""
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="üìö –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è"),
        KeyboardButton(text="üè´ –ú–æ–∏ –∫–ª–∞—Å—Å—ã")
    )
    builder.row(
        KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É"),
        KeyboardButton(text="üèõÔ∏è –û —à–∫–æ–ª–µ")
    )
    builder.row(
        KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
        KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    )
    return builder.as_markup(resize_keyboard=True)


@dp.message(F.text == "üèõÔ∏è –û —à–∫–æ–ª–µ")
async def show_school_info(message: types.Message):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∫–æ–ª–µ"""
    try:
        school_info = await parse_school_info()
        
        response = []
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã
        if school_info.get('name'):
            response.append(f"<b>{school_info['name']}</b>")
        else:
            response.append("<b>–ú–û–£-–°–û–® ‚Ññ1 –≥.–ö—Ä–∞—Å–Ω—ã–π –ö—É—Ç</b>")  # fallback
        
        response.append("")

        # –ê–¥—Ä–µ—Å (–¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –µ—Å—Ç—å)
        if school_info.get('address'):
            response.append(f"üìç <u>–ê–¥—Ä–µ—Å:</u> {school_info['address']}")
            response.append("")

        # –î–∏—Ä–µ–∫—Ç–æ—Ä
        if school_info.get('director'):
            response.append("<u>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ:</u>")
            response.append(school_info['director'])
            response.append("")

        # –ö–æ–Ω—Ç–∞–∫—Ç—ã
        if school_info.get('contacts'):
            response.append("<u>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</u>")
            # –£–±–∏—Ä–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
            contacts = [c for c in school_info['contacts'].split('\n') if not c.startswith('üìç')]
            response.append("\n".join(contacts))
            response.append("")

        # –û–ø–∏—Å–∞–Ω–∏–µ
        if school_info.get('description'):
            response.append("<u>–û —à–∫–æ–ª–µ:</u>")
            response.append(school_info['description'])
            response.append("")

        response.append(f"<a href='{SCHOOL_URL}'>üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç</a>")

        await message.answer(
            "\n".join(response),
            parse_mode="HTML",
            disable_web_page_preview=True
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_student_main_menu()
        )


@dp.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def send_schedule(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ PDF —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    try:
        schedules = await parse_school_schedule()
        
        if not schedules:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
            
        await message.answer("üìÖ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        
        for schedule in schedules:
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                async with httpx.AsyncClient() as client:
                    response = await client.get(schedule['url'])
                    response.raise_for_status()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await message.answer_document(
                        types.BufferedInputFile(
                            response.content,
                            filename=f"{schedule['name']}.pdf"
                        ),
                        caption=f"üìÖ {schedule['name']}"
                    )
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {schedule['name']}: {e}")
                await message.answer(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule['name']}"
                )
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_student_main_menu()
        )


def get_student_cancel_menu() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)


@dp.message(F.text == "üìö –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
async def my_assignments_button(message: types.Message):
    await view_assignments(message)


@dp.message(F.text == "üè´ –ú–æ–∏ –∫–ª–∞—Å—Å—ã")
async def my_classes_button(message: types.Message):
    await view_classes_student(message)


@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É")
async def submit_assignment_button(message: types.Message, state: FSMContext):
    await start_submit_assignment(message, state)


def format_assignments(
    active_assignments: list,
    completed_assignments: list
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    response = ""
    
    if active_assignments:
        response += "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"
        for i, assignment in enumerate(active_assignments, 1):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–ª–Ω—ã–µ, —Ç–∞–∫ –∏ –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            id_ = assignment[0]
            text = assignment[1]
            teacher = assignment[2]
            assigned_at = assignment[3]
            deadline = assignment[4] if len(assignment) > 4 else None
            
            deadline_str = deadline[:10] if deadline else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            response += (
                f"{i}. {text}\n"
                f"üë§ –û—Ç: @{teacher}\n"
                f"‚åõ –°—Ä–æ–∫: {deadline_str}\n\n"
            )
    
    if completed_assignments:
        response += "\n‚úÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n"
        for i, assignment in enumerate(completed_assignments, 1):
            id_ = assignment[0]
            text = assignment[1]
            teacher = assignment[2]
            submitted_at = assignment[3]
            grade = assignment[4] if len(assignment) > 4 else None
            
            grade_str = grade if grade is not None else "–µ—â—ë –Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ"
            response += (
                f"{i}. {text}\n"
                f"üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {submitted_at[:10]}\n"
                f"üè∑ –û—Ü–µ–Ω–∫–∞: {grade_str}\n\n"
            )
    
    return response if response else "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π."


@dp.message(Command("my_assignments"), lambda message: str(message.from_user.username))
async def view_assignments(message: types.Message):
    student_username = message.from_user.username
    
    active = await get_active_assignments(student_username)
    completed = await get_completed_assignments_student(student_username)
    
    response = format_assignments(active, completed)
    
    await message.answer(
        response,
        reply_markup=get_student_main_menu(),
        parse_mode="HTML"
    )

    await send_assignment_files(message.chat.id, active)


async def send_assignment_files(chat_id: int, assignments: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –∑–∞–¥–∞–Ω–∏–π —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π"""
    for i, assignment in enumerate(assignments, 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö –≤ –¥–∞–Ω–Ω—ã—Ö
        if len(assignment) >= 8:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞–º–∏
            *_, file_id, file_type, file_name = assignment
        else:  # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
            
        if file_id:
            try:
                caption = f"–§–∞–π–ª –∫ –∑–∞–¥–∞–Ω–∏—é {i}"
                if file_type == "document":
                    await bot.send_document(
                        chat_id=chat_id,
                        document=file_id,
                        caption=caption
                    )
                else:  # photo
                    await bot.send_photo(
                        chat_id=chat_id,
                        photo=file_id,
                        caption=caption
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –∫ –∑–∞–¥–∞–Ω–∏—é {i}: {e}")


def format_classes_response(classes: list[tuple[str, int]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    response = "üè´ <b>–í–∞—à–∏ –∫–ª–∞—Å—Å—ã:</b>\n"
    for class_name, active_count in classes:
        response += f"‚Ä¢ {class_name}"
        if active_count > 0:
            response += f" ({active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π)"
        response += "\n"
    return response


@dp.message(Command("my_classes"), lambda message: str(message.from_user.username))
async def view_classes_student(message: types.Message):
    student_username = message.from_user.username
    
    async with get_db_connection() as conn:
        classes = await get_student_classes_with_assignments(conn, student_username)
    
    if not classes:
        await message.answer(
            "–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∏ –≤ –æ–¥–∏–Ω –∫–ª–∞—Å—Å.",
            reply_markup=get_student_main_menu(),
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        format_classes_response(classes),
        parse_mode="HTML",
        reply_markup=get_student_main_menu()
    )


def format_assignments_list(assignments: list[tuple[int, int, str, str, str]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    return "\n".join(
        f"{display_num}. {text} (–æ—Ç @{teacher_username})"
        for display_num, _, text, teacher_username, _ in assignments
    )

@dp.message(Command("submit_assignment"), lambda message: str(message.from_user.username))
async def start_submit_assignment(message: Message, state: FSMContext):
    student_username = message.from_user.username
    
    async with get_db_connection() as conn:
        active_assignments = await get_active_assignments_for_student(conn, student_username)
    
    if not active_assignments:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.",
            reply_markup=get_student_main_menu()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
    await message.answer(
        f"üìù <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n"
        f"{format_assignments_list(active_assignments)}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ:",
        parse_mode="HTML",
        reply_markup=get_student_cancel_menu()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤ –∫ ID –∑–∞–¥–∞–Ω–∏–π
    await state.update_data({
        "assignments_mapping": {display_num: id for display_num, id, _, _, _ in active_assignments},
        "active_assignments_count": len(active_assignments)
    })
    await state.set_state(StudentStates.waiting_for_assignment_number)


@dp.message(StudentStates.waiting_for_assignment_number, F.text.regexp(r'^\d+$'))
async def process_assignment_number(message: Message, state: FSMContext):
    assignment_number = int(message.text)
    student_username = message.from_user.username
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    assignments_mapping = data.get("assignments_mapping", {})
    active_assignments_count = data.get("active_assignments_count", 0)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
    if not 1 <= assignment_number <= active_assignments_count:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {active_assignments_count}:",
            reply_markup=get_student_cancel_menu()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    assignment_id = assignments_mapping.get(assignment_number)
    if not assignment_id:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_student_main_menu()
        )
        await state.clear()
        return
    
    async with get_db_connection() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
        assignment = await get_assignment_info(conn, assignment_id, student_username)
        
        if not assignment:
            await message.answer(
                "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
                reply_markup=get_student_main_menu()
            )
            await state.clear()
            return
        
        assignment_text, teacher_username = assignment
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            assignment_id=assignment_id,
            assignment_text=assignment_text,
            teacher_username=teacher_username
        )
        
        await message.answer(
            f"üìÑ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ:</b>\n{assignment_text}\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ñ–∞–π–ª —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç (PDF, Word)\n"
            "‚Ä¢ –§–æ—Ç–æ",
            parse_mode="HTML",
            reply_markup=get_student_cancel_menu()
        )
        await state.set_state(StudentStates.waiting_for_assignment_response)


@dp.message(StudentStates.waiting_for_assignment_number)
async def wrong_assignment_number(message: Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–∞–º–∏:")


@dp.message(StudentStates.waiting_for_assignment_response, F.content_type.in_({ContentType.TEXT}))
async def process_text_response(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(response_text=message.text)
    
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ –æ—Ç–≤–µ—Ç—É? (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ)\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
    )
    await state.set_state(StudentStates.waiting_for_file_response)


async def submit_assignment(
    student_username: str,
    assignment_id: int,
    response_text: str,
    file_id: Optional[str],
    file_type: Optional[str],
    file_name: Optional[str],
    teacher_username: str
) -> bool:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è
    
    Args:
        student_username: –õ–æ–≥–∏–Ω —É—á–µ–Ω–∏–∫–∞
        assignment_id: ID –∑–∞–¥–∞–Ω–∏—è
        response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        file_id: ID —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        file_type: –¢–∏–ø —Ñ–∞–π–ª–∞
        file_name: –ò–º—è —Ñ–∞–π–ª–∞
        teacher_username: –õ–æ–≥–∏–Ω —É—á–∏—Ç–µ–ª—è
        
    Returns:
        bool: –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        assignment = await get_assignment_details(assignment_id, student_username)
        if not assignment:
            print(f"‚ö† –ó–∞–¥–∞–Ω–∏–µ {assignment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            return False
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
        update_success = await update_assignment_response(
            assignment_id,
            response_text,
            file_id,
            file_type,
            file_name
        )
        
        if not update_success:
            return False
        
        # 3. –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∏—Ç–µ–ª—è
        notification_sent = await notify_teacher(
            teacher_username=teacher_username,
            student_username=student_username,
            assignment_text=assignment[1],
            response_text=response_text,
            file_id=file_id,
            file_type=file_type,
            file_name=file_name
        )
        
        if not notification_sent:
            print(f"‚ö† –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é @{teacher_username} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è {assignment_id}: {e}")
        return False


@dp.message(StudentStates.waiting_for_assignment_response, F.content_type.in_({ContentType.DOCUMENT, ContentType.PHOTO}))
async def process_file_response(message: Message, state: FSMContext):
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_keys = ['assignment_id', 'teacher_username']
    missing_keys = [key for key in required_keys if key not in data]
    
    if missing_keys:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_student_main_menu()
        )
        await state.clear()
        return
    
    response_text = ""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    if message.document:
        if message.document.file_size > MAX_FILE_SIZE:
            await message.answer(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE//1024//1024}MB")
            return
        
        file_id = message.document.file_id
        file_type = "document"
        file_name = message.document.file_name
    else:  # photo
        file_id = message.photo[-1].file_id
        file_type = "photo"
        file_name = None
    
    try:
        await submit_assignment(
            student_username=message.from_user.username,
            assignment_id=data["assignment_id"],
            response_text=response_text,
            file_id=file_id,
            file_type=file_type,
            file_name=file_name,
            teacher_username=data["teacher_username"]
        )
        
        await message.answer(
            "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —Å —Ñ–∞–π–ª–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!",
            reply_markup=get_student_main_menu()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}",
            reply_markup=get_student_main_menu()
        )
    finally:
        await state.clear()


@dp.message(StudentStates.waiting_for_file_response, F.content_type.in_({ContentType.DOCUMENT, ContentType.PHOTO}))
async def process_additional_file(message: Message, state: FSMContext):
    data = await state.get_data()
    
    if message.document:
        if message.document.file_size > MAX_FILE_SIZE:
            await message.answer(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE//1024//1024}MB")
            return
        
        file_id = message.document.file_id
        file_type = "document"
        file_name = message.document.file_name
    else:  # photo
        file_id = message.photo[-1].file_id
        file_type = "photo"
        file_name = None
    
    await submit_assignment(
        message.from_user.username,
        data["assignment_index"],
        data.get("response_text", ""),
        file_id,
        file_type,
        file_name,
        data["teacher_username"]
    )
    
    await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —Å —Ñ–∞–π–ª–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
    await state.clear()

@dp.message(Command("skip"), StudentStates.waiting_for_file_response)
async def skip_file_upload(message: Message, state: FSMContext):
    data = await state.get_data()
    
    await submit_assignment(
        message.from_user.username,
        data["assignment_index"],
        data.get("response_text", ""),
        None,
        None,
        None,
        data["teacher_username"]
    )
    
    await message.answer("‚úÖ –í–∞—à —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
    await state.clear()


async def send_file_notification(
    chat_id: int,
    message_text: str,
    file_id: str,
    file_type: str,
    file_name: Optional[str] = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º"""
    try:
        if file_type == "document":
            await bot.send_document(
                chat_id=chat_id,
                document=file_id,
                caption=message_text[:1024]
            )
        elif file_type == "photo":
            await bot.send_photo(
                chat_id=chat_id,
                photo=file_id,
                caption=message_text[:1024]
            )
        print(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (chat_id: {chat_id})")
        return True
    except Exception as file_error:
        print(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {file_error}")
        return False


async def send_text_notification(chat_id: int, message_text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        await bot.send_message(chat_id=chat_id, text=message_text)
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (chat_id: {chat_id})")
        return True
    except Exception as text_error:
        print(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {text_error}")
        return False

async def notify_teacher(
    teacher_username: str,
    student_username: str,
    assignment_text: str,
    response_text: str = "",
    file_id: str = None,
    file_type: str = None,
    file_name: str = None
) -> bool:
    """–ù–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    try:
        async with get_db_connection() as conn:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ chat_id
            chat_id = await get_teacher_chat_id(conn, teacher_username)
            if not chat_id:
                print(f"‚ö† –£—á–∏—Ç–µ–ª—å @{teacher_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ chat_id
            if not isinstance(chat_id, (int, str)) or not str(chat_id).strip():
                print(f"‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id –¥–ª—è —É—á–∏—Ç–µ–ª—è @{teacher_username}: {chat_id}")
                return False
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –∏–º—è —É—á–µ–Ω–∏–∫–∞
            student_name = await get_student_display_name(conn, student_username)
            
            # 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = (
                f"üì¨ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ!\n"
                f"üë§ –£—á–µ–Ω–∏–∫: {student_name} (@{student_username})\n"
                f"üìö –ó–∞–¥–∞–Ω–∏–µ: {assignment_text}\n"
            )
            
            if response_text:
                message_text += f"üìù –û—Ç–≤–µ—Ç: {response_text[:500]}\n"
            
            # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            success = False
            if file_id and file_type:
                message_text += f"üìé –ü—Ä–∏–ª–æ–∂–µ–Ω —Ñ–∞–π–ª: {file_name if file_name else file_type}"
                success = await send_file_notification(chat_id, message_text, file_id, file_type, file_name)
                if not success:
                    message_text += "\n‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ"
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            if not success:
                success = await send_text_notification(chat_id, message_text)
            
            return success

    except Exception as e:
        print(f"‚ö† –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —É—á–∏—Ç–µ–ª—è @{teacher_username}: {e}")
        return False